{"version":3,"sources":["components/weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["minMaxTemp","min","max","className","Math","floor","getTemp","temp","getClassName","descr","split","ampm","Date","getHours","Weather","props","console","log","data","weather","description","name","src","icon","alt","main","feels_like","temp_min","temp_max","App","useState","setData","city","setCity","useEffect","a","axios","get","response","navigator","geolocation","fetchData","type","placeholder","onBlur","event","target","value","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySA6BMA,EAAa,SAACC,EAAKC,GACrB,OACI,+BACI,uBAAMC,UAAU,OAAhB,UAAwBC,KAAKC,MAAmB,GAAZJ,EAAI,QAAU,EAAE,IAApD,UACA,uBAAME,UAAU,OAAhB,UAAwBC,KAAKC,MAAmB,GAAZH,EAAI,QAAU,EAAE,IAApD,cAMNI,EAAQ,SAACC,GACX,OAAOH,KAAKC,MAAoB,GAAbE,EAAK,QAAU,EAAE,KAGlCC,EAAe,SAACC,GAElB,GAAkB,UADAA,EAAMC,MAAM,KAAK,GAEnC,CACI,IAAIC,GAAO,IAAIC,MAAOC,WAAW,GAAG,QAAQ,MAC5C,OAAOJ,EAAMC,MAAM,KAAK,GAAGC,EAE9B,OAAOF,EAAMC,MAAM,KAAK,IAIdI,EAnDC,SAACC,GACbC,QAAQC,IAAI,cAAcF,GAC9B,IAAOG,EAAQH,EAARG,KAKP,OAFAF,QAAQC,IAAI,WAAU,IAAIL,MAAOC,YAGnB,OAATK,EACG,qBAAKf,UAAWK,EAAaU,EAAKC,QAAQ,GAAGC,aAA7C,SACI,sBAAKjB,UAAU,QAAf,UACI,+BAAKe,EAAKG,KAAV,OACA,qBAAKlB,UAAU,cAAcmB,IAAG,0CAAqCJ,EAAKC,QAAQ,GAAGI,KAArD,QAAiEC,IAAI,KACrG,qBAAIrB,UAAU,OAAd,UAAsBG,EAAQY,EAAKO,KAAKlB,MAAxC,UACA,qBAAIJ,UAAU,OAAd,wBAAiCG,EAAQY,EAAKO,KAAKC,YAAnD,UACC1B,EAAWkB,EAAKO,KAAKE,SAAUT,EAAKO,KAAKG,UAC1C,6BAAKV,EAAKC,QAAQ,GAAGC,mBAM1B,+CCgBIS,MAjCf,WACE,MAAuBC,mBAAS,MAAhC,mBAAOZ,EAAP,KAAYa,EAAZ,KACA,EAAoBD,mBAAS,UAA7B,mBAAME,EAAN,KAAWC,EAAX,KAoBA,OAVAC,qBAAU,YACQ,uCAAG,WAAOF,GAAP,eAAAG,EAAA,sEAEMC,IAAMC,IAAN,2DAA8DL,EAA9D,kBAhBb,qCAcO,OAEXM,EAFW,OAGjBtB,QAAQC,IAAI,YAAaqB,EAASpB,MAClCF,QAAQC,IAAI,gBAAiBsB,UAAUC,aACxCT,EAAQO,EAASpB,MALC,2CAAH,sDAMduB,CAAUT,KAEX,CAACA,IAEF,qBAAK7B,UAAU,MAAf,SACE,qCACA,uBAAQuC,KAAK,OAAQC,YAAY,uBAAuBC,OArBvC,SAACC,GACpBZ,EAAQY,EAAMC,OAAOC,UAqBnB,wBAAQL,KAAK,SAASM,QAlBN,SAACH,GACnB7B,QAAQC,IAAI,QAAQe,IAiBlB,yBACA,cAAC,EAAD,CAASd,KAAMA,UCvBN+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d881f4a9.chunk.js","sourcesContent":["import React from 'react'\nimport './weather.css'\n\nconst Weather = (props) => {\n    console.log('props data ',props)\nconst {data} = props\n// const {weatherdata} = weather[0]\n// console.log('weather description ', (data.weather[0].description).split[0])\nconsole.log('am pm  ',new Date().getHours())\n\nreturn (\n    (data !== null) ? \n        <div className={getClassName(data.weather[0].description)}>\n            <div className=\"cards\">\n                <h1>{data.name} </h1>\n                <img className='owf owf-200' src={`http://openweathermap.org/img/w/${data.weather[0].icon}.png`} alt='' />\n                <h1 className=\"py-2\">{getTemp(data.main.temp)}&deg;</h1>\n                <h3 className=\"py-2\">Feels like {getTemp(data.main.feels_like)}&deg;</h3>\n                {minMaxTemp(data.main.temp_min, data.main.temp_max)}\n                <h4>{data.weather[0].description}</h4>\n\n\n\n            </div>\n        </div>\n        :  <div>loading....</div>\n    )\n}\n\nconst minMaxTemp = (min, max) => {\n    return (\n        <h3>\n            <span className=\"px-4\">{Math.floor((min-273.15)*9/5+32)}&deg;</span>\n            <span className=\"px-4\">{Math.floor((max-273.15)*9/5+32)}&deg;</span>\n\n        </h3>\n    )\n}\n\nconst getTemp=(temp) => {\n    return Math.floor((temp-273.15)*9/5+32)\n}\n\nconst getClassName = (descr) => {\n    const splitDescr =descr.split(\" \")[0];\n    if(splitDescr === 'clear')\n    {\n        var ampm = new Date().getHours()>12?'night':'day'\n        return descr.split(\" \")[0]+ampm\n    }  \n     return descr.split(\" \")[0]\n}\n\n\nexport default Weather;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Weather from './components/weather'\n// import 'weather-icons/css/weather-icons.css'\n\nconst API_KEY = '628590cf41f62b24088e44954d84af20'\nfunction App() {\n  const [data,setData] = useState(null);\n  const[city,setCity]=useState('London')\n\n  const handleChange = (event) => {\n    setCity(event.target.value);\n  }\n\n  const handleClick = (event) => {\n    console.log('city ',city);\n\n  }\n  useEffect(() => {\n     const fetchData = async (city) => {\n\n     const  response = await axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`);\n      console.log('response ', response.data)\n      console.log('current city ', navigator.geolocation)\n     setData(response.data)}\n      fetchData(city);\n   \n  }, [city])\n  return (\n    <div className=\"App\">\n      <>\n      <input  type='text'  placeholder='Enter city name.... ' onBlur={handleChange}/>\n      <button type='submit' onClick= {handleClick}>Get Weather</button>\n      <Weather data={data}/>\n      </>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}